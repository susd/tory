upstream tory_puma {
  server unix:///srv/rails/tory/shared/tmp/sockets/puma.sock fail_timeout=0;
  # for TCP setups, point these to your backend servers
  # server 192.168.0.7:8080 fail_timeout=0;
  # server 192.168.0.8:8080 fail_timeout=0;
  # server 192.168.0.9:8080 fail_timeout=0;
}

server {
  # enable one of the following if you're on Linux or FreeBSD
  listen 80; # default deferred; # for Linux
  # listen 80 default accept_filter=httpready; # for FreeBSD
  client_max_body_size 4G;
  server_name tory.saugususd.org tory.saugus.k12.ca.us;

  # ~2 seconds is often enough for most folks to parse HTML/CSS and
  # retrieve needed images/icons/frames, connections are cheap in
  # nginx so increasing this is generally safe...
  keepalive_timeout 5;

  # path for static files
  root /srv/rails/tory/current/public;
  try_files $uri/index.html $uri.html $uri @app;
  
  # Configure asset handling to serve pre-gzipped versions, with maximum expiry lengths
  # location ~ ^/(assets)/  {
  #   root /srv/rails/megan/shared/assets;
  #   gzip_static on;
  #   expires max;
  #   add_header Cache-Control public;
  # }

  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  
    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
    # proxy_set_header X-Forwarded-Proto $scheme;
  
    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;
  
    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
  
    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll/streaming.  It's also safe to set if you're using
    # only serving fast clients with Unicorn + nginx, but not slow
    # clients.  You normally want nginx to buffer responses to slow
    # clients, even with Rails 3.1 streaming because otherwise a slow
    # client can become a bottleneck of Unicorn.
    #
    # The Rack application may also set "X-Accel-Buffering (yes|no)"
    # in the response headers do disable/enable buffering on a
    # per-response basis.
    # proxy_buffering off;
    
    proxy_cache one;
    proxy_cache_valid 200 302 1m;
    proxy_cache_valid 404 60m;
    proxy_cache_use_stale error timeout invalid_header updating;
    # proxy_cache_key "$scheme$host$request_uri";
  
    proxy_pass http://tory_puma;
  }

  # Rails error pages
  # error_page 500 502 503 504 /500.html;
  # location = /500.html {
  #   root /srv/rails/juice/current/public;
  # }

}
